
The labels on the points have been rotated, gotta update the math document.. hmm, looks like the labels in there are from the web page in spite of saying "source"! The text needs to get a good check, maybe some clarifications, or maybe 2/3 of it is redundant?

Glyph is good for no rotation/flip. That's probably fine, but some thoughts..
  even out the space perpendicularly from the rays to the glyph, probably weighing the pointy end less.
  interactively adjust position based on parameters, probably with some interpolation

PNG output with cairo?
svglib to reportlab looks more direct? be nice if it was all-free
cairosvg looks not so bad, but setting up cairo might be hairy, and requires python3
  it claims a compiler is required for windoze.. that doesn't sound right

the tile unit seems to depend on rotation, seems like a rectangle side x sqrt(3)*side is usually right, but the orientation could be either way.

well, if it''s rotation dependent, there's all the madness in rollngon, maybe that's involved?

I think a bounding box around a flipped pair would do it. Make one adjacent tile, take the extents, and finish recursion. Bob's your uncle!

Probably with a clip and svg to png. Two levels of recursion sufficies if the tiles are aligned with an axis, otherwise three.

In inkscape, turn off all tiles except a flipped pair, select all, resize page to selection, turn tiles back on, export to bitmap! IRfanview will make a tiling from the unit tile, works when aligned..
not when unaligned, fooey!


not triphi:

the tag registry would work if the tag parameter had a default.. but it doesn't seem as useful? maybe later.. or a branch? imported elements can just be inserted directly, have the root converted, or convert recursively

make inkscape support optional

triphi has a lot of dependencies the library doesn't use. might have to split? sad!
It's also grown a lot, kinda swamps the rest
not so much, you're thinking of the rollingngon.
was planning to add argsplusplus, but that's only one.. it uses adb, which uses unexpressions. unexpressions is okay, adb might try to get rid of.

path.close() draws a line back to the start, it isn't required or implicit after gc etc.
Some demos may use it unecessarily.

Paths.. well, also others? no.
  got some ideas for supporting absolute movements in Paths. Accept None as starting opint, raise ValueError if relative move is attempted without an absolute first. Alternatively, set position to 0,0.

  Methods lookup their path subcmd, have a common backend method that does the call, with either absolute or relative variants. They have the same signatures.

  delegate the methods through attributes. p=Path(); p.abs.fooCmd() or p.rel.fooCmd()

  horizontal/vertical lines would be easy and Nice To Have

