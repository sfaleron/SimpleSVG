
Removing layers need not be irreversable, keep track of them in the root node

importer should keep track of tags added and replaced

The flags stuff, it's not going to work so well. It should work like the argspluplus, with an inheritence stack of mostly independent classes, I think.

How to wrap <use>, <clipPath>? The implementation might be restraining.

SVG spec has a few categories, but MDN might be better
https://developer.mozilla.org/en-US/docs/Web/SVG/Element#SVG_elements_by_category

Test: copy, EmbedStack, freeze_attrs

decorations might include
  right angle symbol
    works like arc
  perpedicular bars terminating segments
    work like ticks

  text aligned/centered wrt two points, with a perpendicular offset parameter.
  segment labels suggest point labels. got some of those already, shift em over!


Need a way to reference some document-wide options, such as changing colors or linewidths "globally".

push_layer() sets the element id based on the label, that should probably be a default action
meh.. set key afterwards on returned element is very clear/easy

SVG v2 incorporates the elements from xlink namespace, the "xlink:" qualifier is toast, in the standard; implementations will vary. inkscape may be pickier than the browsers; they will probably try harder to retain compatibility.


How to deal consistently, clearly with flipped y-axis. Substitute atan(), sin() seem nice, but probably not comprehensive enough to resolve all cases. a transformation function would be nice, but how to keep track of it, withough making it obligatory to all calls? seems like a class wrapping teh whole library would do this, but that's a big chore.

generalized.py might miss the flipped y corrections.. or not need them?

aiming to put comments tagged "IVY" wherever the inverted-y issue is relevant.. should be done, although misses are conceivable

Add angle labels to the decorations sample

angle labels, webfonts, triphi/simplesvg to github

segregate TODO items, most of that isn't really for general consumption
  there's an easy answer thath keeps private TODO tracked. a seperate branch! ideally, a separate github branch, but I'm not sure if that's possible/feasible. A new local branch would probably be better. Good idea for new repos, though! Actually, no. The dev/private branch should be the independent one.. maybe a seperate "release" branch, but that isn't the same as a github branch.

  dev wouldn't necessarily be private always. or maybe it should tsart there, and evertually be promoted?
